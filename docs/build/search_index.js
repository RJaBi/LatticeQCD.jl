var documenterSearchIndex = {"docs":
[{"location":"#LatticeQCD.jl","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"","category":"section"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"This is the lattice QCD package purely written in Julia language. Lattice QCD is a well-established non-perturbative approach to solving the quantum chromodynamics (QCD) theory of quarks and gluons.","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"We confirmed that it works in Julia 1.5 or later. ","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"This code is inspired by the Lattice Tool Kit (LTK) written in Fortran. With the use of a modern programing language, it is easy to understand how the code works.  The part of the codes is translated from the LTK. ","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"What LatticeQCD.jl can do is :","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"Two flavor SU(3) Hybrid Monte Carlo with the Wilson Fermion (We want to add more functionalities.). \nThe speed is the faster than the original LTK code written in fortran. ","category":"page"},{"location":"#How-to-do","page":"LatticeQCD.jl","title":"How to do","text":"","category":"section"},{"location":"#simple-version","page":"LatticeQCD.jl","title":"simple version","text":"","category":"section"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"You can try this code with ","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"julia ./src/run.jl","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"or ","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"julia ./src/run.jl params.jl","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"Here, in params.jl, we can see ","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"L = (4,4,4,4)\r\nβ = 6\r\n#gparam = Setup_Gauge_action(β)\r\n\r\nNTRACE = 3\r\ngparam =  GaugeActionParam_standard(β,NTRACE)\r\n#gparam = Setup_Gauge_action(β)\r\n\r\nhop= 0.141139#Hopping parameter\r\nr= 1#Wilson term\r\neps= 1e-19\r\nDirac_operator= \"Wilson\"\r\nMaxCGstep= 3000\r\n#fparam = Setup_Fermi_action()\r\nfparam = FermiActionParam_Wilson(hop,r,eps,Dirac_operator,MaxCGstep)","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"You can change the parameters.  If you set fparam=nothing in this file, you can do the quench HMC.","category":"page"},{"location":"#more-details","page":"LatticeQCD.jl","title":"more details","text":"","category":"section"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"In the LatticeQCD.jl, the Universe type is an important type for simulations.  At first, you have to generate your \"universe\". ","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"univ = Universe(file)","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"The file is like: ","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"L = (4,4,4,4)\r\nβ = 6\r\nNTRACE = 3\r\n#gparam = Setup_Gauge_action(β)\r\ngparam =  GaugeActionParam_standard(β,NTRACE)\r\n\r\nBoundaryCondition=[1,1,1,-1]\r\nNwing = 1\r\ninitial=\"cold\"\r\nNC =3\r\n\r\n\r\nhop= 0.141139#Hopping parameter\r\nr= 1#Wilson term\r\neps= 1e-19\r\nDirac_operator= \"Wilson\"\r\nMaxCGstep= 3000\r\n\r\nfparam = FermiActionParam_Wilson(hop,r,eps,Dirac_operator,MaxCGstep)\r\n","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"The parameters that you do not provide are set by the default values. ","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"Then, you can calculate physical obserbables.  For example, if you want to calculate a plaquette, just do ","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"plaq = calc_plaquette(univ)\r\nprintln(\"plaq = \",plaq)","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"If you want to do the HMC simulation, set the MD parameters: ","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"Δτ = 0.1\r\nMDsteps = 10\r\nβMD = β\r\n\r\nmdparams =MD_parameters_standard(gparam,Δτ,MDsteps,βMD)","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"and do it like: ","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"for i=1:20\r\n    Sold = md_initialize!(univ)\r\n    Snew = md!(univ,mdparams)\r\n\r\n    metropolis_update!(univ,Sold,Snew)\r\n    plaq = calc_plaquette(univ)\r\n    println(\"-------------------------------------\")\r\n    println(\"$i-th plaq = \",plaq)\r\n    println(\"-------------------------------------\")\r\nend ","category":"page"},{"location":"#Benchmarks","page":"LatticeQCD.jl","title":"Benchmarks","text":"","category":"section"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"The speed is important for the Lattice QCD simulation.  Remarkably, this Julia code is faster than s similar code in Fortran. ","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"For example, with the following parameters: ","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"6.0d0     6.0d0         beta, betamd\r\n0.141139d0  1.d0         hop,  r (Hopping parametger, Wilson term)\r\n.false.                   Clover term\r\n(0.0d0,0.0d0)            cmu (Chemical potential)\r\n1                        istart (1:Cold, 2:Hot, 3:File)\r\n001       020            ntraj0, ntraj1 \r\n1.d0                     gamma_G\r\n10     0.1d0            nstep, dtau\r\n.true.                   fermions\r\n0                        flagMD","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":", where this is an input file of the LTK.  We set eps=1e-19 as a convergence criteria in a CG solver. ","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"The elapsed time of the original LTK code on Mac mini (2018) with 3.2Ghz Intel Core i7 (6 cores) is ","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"Eold,Enew,Diff,accept:   0.1613911E+04    0.1614279E+04   -0.3678492E+00   T\r\n Plaq :   0.60513145439721250     \r\n Pol :         (1.1156431755476819,-3.20744714128515240E-002)\r\n./a.out < input  227.40s user 0.07s system 99% cpu 3:47.51 total","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"On the other hand, the elapsed time of this LatticeQCD.jl is ","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"-------------------------------------\r\n20-th plaq = 0.6051309989225465\r\n-------------------------------------\r\njulia --sysimage ~/sys_plots.so run.jl  180.41s user 0.25s system 100% cpu 3:00.62 total","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"The LatticeQCD.jl is faster than the Fortran-based code. ","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"We note that the plaquette value is consistently in single precision floating point numbers,  since the random number generation is based on the original Fortran code and random numbers are in single precision floating point.","category":"page"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"Modules = [LatticeQCD.LTK_universe]","category":"page"},{"location":"#LatticeQCD.LTK_universe.Universe","page":"LatticeQCD.jl","title":"LatticeQCD.LTK_universe.Universe","text":"Your universe is described in this type.\n\n\n\n\n\n","category":"type"},{"location":"#LatticeQCD.LTK_universe.Universe-2","page":"LatticeQCD.jl","title":"LatticeQCD.LTK_universe.Universe","text":"Universe(L::Tuple,gparam::GaugeActionParam,initial=\"cold\",fparam=nothing)\n\nL: system size (NX,NY,NZ,NT)\ngparam: parameters for gauge actions\n[initial]: initial Gauge configuration\n[fparam]: parameters for fermion actions\n\n\n\n\n\n","category":"type"},{"location":"#LatticeQCD.LTK_universe.Universe-Tuple{Any}","page":"LatticeQCD.jl","title":"LatticeQCD.LTK_universe.Universe","text":"Universe(file)\n\nfile: file name of the input file.\n\nMake your universe. The input file is loaded.\n\nUndefined parameters in your input file are defined with the default values.\n\nThe default values are as follows.\n\n    L = (4,4,4,4)\n    β = 6\n    NTRACE = 3\n    #gparam = Setup_Gauge_action(β)\n    gparam =  GaugeActionParam_standard(β,NTRACE)\n\n    BoundaryCondition=[1,1,1,-1]\n    Nwing = 1\n    initial=\"cold\"\n    NC =3\n\n\n    hop= 0.141139 #Hopping parameter\n    r= 1 #Wilson term\n    eps= 1e-19\n    Dirac_operator= \"Wilson\"\n    MaxCGstep= 3000\n\n    fparam = FermiActionParam_Wilson(hop,r,eps,Dirac_operator,MaxCGstep)\n\n\n\n\n\n\n","category":"method"},{"location":"","page":"LatticeQCD.jl","title":"LatticeQCD.jl","text":"Setup_Gauge_action\r\nSetup_Fermi_action","category":"page"},{"location":"#LatticeQCD.Actions.Setup_Gauge_action","page":"LatticeQCD.jl","title":"LatticeQCD.Actions.Setup_Gauge_action","text":"Setup_Gauge_action(β;actiontype=\"standard\")`\n\nβ: Coupling value\n\nSet up the information about the Gauge action. You can set the coupling value β.\n\nNow only SU(3) case is supported.\n\n\n\n\n\n","category":"function"},{"location":"#LatticeQCD.Actions.Setup_Fermi_action","page":"LatticeQCD.jl","title":"LatticeQCD.Actions.Setup_Fermi_action","text":"Setup_Fermi_action(Dirac_operator= \"Wilson\")\n\nSet up the information about the Fermion action.\n\nNow only WilsonFermion case is supported.\n\nFor example\n\n    fparam = Setup_Fermi_action()\n\nThe default values are \n\nhop::Float64  = 0.141139\nr::Float64  = 1\neps::Float64 = 1e-19\nDirac_operator::String = \"Wilson\"\nMaxCGstep::Int64 = 3000\n\nhop : hopping parameter\nr : Wilson term\neps : convergence criteria in the CG method\nMaxCGstep : maximum number of the CG steps\n\nIf you want to change the parameters for the Wilson Fermions,  please do as follows.\n\n    fparam = FermiActionParam_Wilson(hop,r,eps,MaxCGstep)\n\n\n\n\n\n","category":"function"}]
}
