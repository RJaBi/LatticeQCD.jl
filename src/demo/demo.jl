module Demo
    using Dates
    using Plots

    import ..System_parameters:Params_set,parameterloading
    import ..LTK_universe:Universe
    import  ..MD:construct_MD_parameters
    import ..Measurements:Measurement_set,measurements
    import ..Verbose_print:println_verbose1,println_verbose2,Verbose_1
    import ..Heatbath:heatbath!


    system = Dict()
    actions = Dict()
    md = Dict()
    cg = Dict()
    wilson = Dict()
    staggered = Dict()
    measurement = Dict()
    # - - parameters - - - - - - - - - - - 
# - - parameters - - - - - - - - - - - 
    system["saveU_dir"] = ""
    system["verboselevel"] = 1
    system["L"] = (6, 6, 6, 6)
    system["Nwing"] = 1
    system["Nsteps"] = 10000
    system["quench"] = true
    system["logfile"] = "Heatbath_L06060606_beta8.0_quenched.txt"
    system["initial"] = "cold"
    system["Dirac_operator"] = nothing
    system["log_dir"] = "./logs"
    system["Nthermalization"] = 10
    system["update_method"] = "Heatbath"
    system["randomseed"] = 111
    system["NC"] = 3
    system["saveU_every"] = 1
    system["BoundaryCondition"] = [1, 1, 1, -1]
    system["saveU_format"] = nothing
    system["β"] = 8.0
    actions["use_autogeneratedstaples"] = false
    actions["couplingcoeff"] = Any[]
    actions["couplinglist"] = Any[]
    md["Δτ"] = 0.05
    md["SextonWeingargten"] = false
    md["MDsteps"] = 20
    cg["eps"] = 1.0e-19
    cg["MaxCGstep"] = 3000
    wilson["Clover_coefficient"] = 0
    wilson["r"] = 1
    wilson["hop"] = 0
    staggered["Nf"] = 0
    staggered["mass"] = 0
    measurement["measurement_methods"] = Dict[Dict{Any,Any}("fermiontype" => nothing,"measure_every" => 1,"methodname" => "Polyakov_loop"), Dict{Any,Any}("fermiontype" => nothing,"measure_every" => 1,"methodname" => "Plaquette")]
    measurement["measurement_dir"] = "Heatbath_L06060606_beta8.0_quenched"
    measurement["measurement_basedir"] = "./measurements"
    # - - - - - - - - - - - - - - - - - - -

    function demo()

        params_set = Params_set(system,actions,md,cg,wilson,staggered,measurement)

        parameters = parameterloading(params_set)
        univ = Universe(parameters)

        mdparams = construct_MD_parameters(parameters)

        meas = Measurement_set(univ,parameters.measuredir,measurement_methods=parameters.measurement_methods)
        run_demo!(parameters,univ,meas)

    end

    function run_demo!(parameters,univ,meas)
        plt1 = histogram([0],label=nothing) #plot1
        plt2 = plot([], [],label=nothing) #plot2
        ylabel!("Plaquette")
        xlabel!("MC time")
        plt3 = histogram([0],label=nothing) #plot3
        plt4 = plot([], [],label=nothing) #plot4
        ylabel!("Polyakov loop")
        xlabel!("MC time")
        plot(plt1, plt2, plt3, plt4, layout = 4)

        hist_plaq=[]
        hist_poly=[]

        function plot_refresh!(plt1,plt2,plt3,plt4,hist_plaq,hist_poly, plaq, poly,itrj)
            bins=round(Int,log(itrj)*5+1)
            append!(hist_plaq, plaq)
            append!(hist_poly, poly)
            #
            plt1 = histogram(hist_plaq,bins=bins,label=nothing) #plot1
            xlabel!("Plaquette")
            plt3 = histogram(hist_poly,bins=bins,label=nothing) #plot3
            xlabel!("Polyakov loop")
            #
            push!(plt2, 1, itrj, plaq)
            push!(plt4, 1, itrj, poly)
            #
            plot(plt1, plt2, plt3, plt4, layout = 4)
            gui()
        end


        @assert parameters.update_method == "Heatbath"
        verbose = Verbose_1()
        Nsteps = parameters.Nsteps
        numaccepts = 0
        plaq,poly = measurements(0,univ.U,univ,meas;verbose = verbose) # check consistency of preparation.

        for itrj=1:Nsteps
            @time heatbath!(univ)
            plaq,poly = measurements(itrj,univ.U,univ,meas;verbose = verbose)
            plot_refresh!(plt1,plt2,plt3,plt4,hist_plaq,hist_poly, plaq, abs(poly),itrj)

            println_verbose1(verbose,"-------------------------------------")
            #println("-------------------------------------")
            flush(stdout)
            flush(verbose)
        end
    end


end